def _single_replace(self, to_replace, method, inplace, limit):
bool_t = bool  # Need alias because NDFrame has def bool:
class NDFrame(PandasObject, SelectionMixin):
    def __init__(
    def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):
    def is_copy(self):
    def is_copy(self, msg):
    def _validate_dtype(self, dtype):
    def _constructor(self):
    def _constructor_sliced(self):
    def _constructor_expanddim(self):
    def _setup_axes(
            def set_axis(a, i):
    def _construct_axes_dict(self, axes=None, **kwargs):
    def _construct_axes_dict_from(self, axes, **kwargs):
    def _construct_axes_from_arguments(
    def _from_axes(cls, data, axes, **kwargs):
    def _get_axis_number(cls, axis):
    def _get_axis_name(cls, axis):
    def _get_axis(self, axis):
    def _get_block_manager_axis(cls, axis):
    def _get_axis_resolvers(self, axis):
    def _get_index_resolvers(self):
    def _get_space_character_free_column_resolvers(self):
    def _info_axis(self):
    def _stat_axis(self):
    def shape(self):
    def axes(self):
    def ndim(self):
    def size(self):
    def _selected_obj(self):
    def _obj_with_exclusions(self):
    def set_axis(self, labels, axis=0, inplace=False):
    def _set_axis(self, axis, labels):
    def transpose(self, *args, **kwargs):
    def swapaxes(self, axis1, axis2, copy=True):
    def droplevel(self, level, axis=0):
    def pop(self, item):
             name   class  max_speed
    def squeeze(self, axis=None):
    def swaplevel(self, i=-2, j=-1, axis=0):
    def rename(self, *args, **kwargs):
    def rename_axis(self, mapper=sentinel, **kwargs):
        class  name
    def _set_axis_name(self, name, axis=0, inplace=False):
    def _indexed_same(self, other):
    def equals(self, other):
    def __neg__(self):
    def __pos__(self):
    def __invert__(self):
    def __nonzero__(self):
    def bool(self):
    def __abs__(self):
    def __round__(self, decimals=0):
    def _is_level_reference(self, key, axis=0):
    def _is_label_reference(self, key, axis=0):
    def _is_label_or_level_reference(self, key, axis=0):
    def _check_label_or_level_ambiguity(self, key, axis=0):
    def _get_label_or_level_values(self, key, axis=0):
    def _drop_labels_or_levels(self, keys, axis=0):
    def __hash__(self):
    def __iter__(self):
    def keys(self):
    def items(self):
    def iteritems(self):
    def __len__(self):
    def __contains__(self, key):
    def empty(self):
    def __array__(self, dtype=None):
    def __array_wrap__(self, result, context=None):
    # def __array_interface__(self):
    def to_dense(self):
    def __getstate__(self):
    def __setstate__(self, state):
    def __repr__(self):
    def _repr_latex_(self):
    def _repr_data_resource_(self):
    def to_excel(
    def to_json(
    def to_hdf(self, path_or_buf, key, **kwargs):
    def to_msgpack(self, path_or_buf=None, encoding="utf-8", **kwargs):
    def to_sql(
    def to_pickle(self, path, compression="infer", protocol=pickle.HIGHEST_PROTOCOL):
    def to_clipboard(self, excel=True, sep=None, **kwargs):
    def to_xarray(self):
             name   class  max_speed  num_legs
            class      (index) object 'bird' 'bird' 'mammal' 'mammal'
    def to_latex(
    def to_csv(
    def _create_indexer(cls, name, indexer):
    def _set_as_cached(self, item, cacher):
    def _reset_cacher(self):
    def _maybe_cache_changed(self, item, value):
    def _is_cached(self):
    def _get_cacher(self):
    def _maybe_update_cacher(self, clear=False, verify_is_copy=True):
    def _clear_item_cache(self):
    def take(self, indices, axis=0, is_copy=True, **kwargs):
             name   class  max_speed
             name   class  max_speed
            class  max_speed
             name   class  max_speed
    def xs(self, key, axis=0, level=None, drop_level=True):
        class  animal  locomotion
        class  locomotion
        class   animal   locomotion
    def __getitem__(self, item):
    def _get_item_cache(self, item):
    def _iget_item_cache(self, item):
    def _box_item_values(self, key, values):
    def _slice(self, slobj: slice, axis=0, kind=None):
    def _set_item(self, key, value):
    def _set_is_copy(self, ref=None, copy=True):
    def _check_is_chained_assignment_possible(self):
    def _check_setitem_copy(self, stacklevel=4, t="setting", force=False):
    def __delitem__(self, key):
    def get(self, key, default=None):
    def _is_view(self):
    def reindex_like(self, other, method=None, copy=True, limit=None, tolerance=None):
    def drop(
    def _drop_axis(self, labels, axis, level=None, errors="raise"):
    def _update_inplace(self, result, verify_is_copy=True):
    def add_prefix(self, prefix):
    def add_suffix(self, suffix):
    def sort_values(
    def sort_index(
    def reindex(self, *args, **kwargs):
    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):
    def _needs_reindex_multi(self, axes, method, level):
    def _reindex_multi(self, axes, copy, fill_value):
    def _reindex_with_indexers(
    def filter(self, items=None, like=None, regex=None, axis=None):
            def f(x):
            def f(x):
    def head(self, n=5):
    def tail(self, n=5):
    def sample(
    def pipe(self, func, *args, **kwargs):
    def __finalize__(self, other, method=None, **kwargs):
    def __getattr__(self, name):
    def __setattr__(self, name, value):
    def _dir_additions(self):
    def _protect_consolidate(self, f):
    def _consolidate_inplace(self):
        def f():
    def _consolidate(self, inplace=False):
    def _is_mixed_type(self):
    def _is_numeric_mixed_type(self):
    def _is_datelike_mixed_type(self):
    def _check_inplace_setting(self, value):
    def _get_numeric_data(self):
    def _get_bool_data(self):
    def as_matrix(self, columns=None):
    def values(self):
    def _values(self):
    def _get_values(self):
    def get_values(self):
    def _internal_get_values(self):
    def get_dtype_counts(self):
    def get_ftype_counts(self):
    def dtypes(self):
    def ftypes(self):
    def as_blocks(self, copy=True):
    def blocks(self):
    def _to_dict_of_blocks(self, copy=True):
    def astype(self, dtype, copy=True, errors="raise"):
    def copy(self, deep=True):
    def __copy__(self, deep=True):
    def __deepcopy__(self, memo=None):
    def _convert(
    def infer_objects(self):
    def fillna(
    def ffill(self, axis=None, inplace=False, limit=None, downcast=None):
    def bfill(self, axis=None, inplace=False, limit=None, downcast=None):
    def replace(
    def interpolate(
    def asof(self, where, subset=None):
    def isna(self):
    def isnull(self):
    def notna(self):
    def notnull(self):
    def _clip_with_scalar(self, lower, upper, inplace=False):
    def _clip_with_one_bound(self, threshold, method, axis, inplace):
    def clip(self, lower=None, upper=None, axis=None, inplace=False, *args, **kwargs):
    def clip_upper(self, threshold, axis=None, inplace=False):
    def clip_lower(self, threshold, axis=None, inplace=False):
    def groupby(
    def asfreq(self, freq, method=None, how=None, normalize=False, fill_value=None):
    def at_time(self, time, asof=False, axis=None):
    def between_time(
    def resample(
        >>> def custom_resampler(array_like):
    def first(self, offset):
    def last(self, offset):
    def rank(
        def ranker(data):
    def align(
    def _align_frame(
    def _align_series(
    def _where(
    def where(
    def mask(
    def shift(self, periods=1, freq=None, axis=0, fill_value=None):
    def slice_shift(self, periods=1, axis=0):
    def tshift(self, periods=1, freq=None, axis=0):
    def truncate(self, before=None, after=None, axis=None, copy=True):
    def tz_convert(self, tz, axis=0, level=None, copy=True):
        def _tz_convert(ax, tz):
    def tz_localize(
        def _tz_localize(ax, tz, ambiguous, nonexistent):
    def abs(self):
    def describe(self, percentiles=None, include=None, exclude=None):
        def describe_numeric_1d(series):
        def describe_categorical_1d(data):
        def describe_1d(data):
    def pct_change(self, periods=1, fill_method="pad", limit=None, freq=None, **kwargs):
    def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):
    def _add_numeric_operations(cls):
        def mad(self, axis=None, skipna=None, level=None):
        def compound(self, axis=None, skipna=None, level=None):
    def _add_series_only_operations(cls):
        def nanptp(values, axis=0, skipna=True):
    def _add_series_or_dataframe_operations(cls):
        def rolling(
        def expanding(self, min_periods=1, center=False, axis=0):
        def ewm(
    def transform(self, func, *args, **kwargs):
    def _find_valid_index(self, how):
    def first_valid_index(self):
    def last_valid_index(self):
def _doc_parms(cls):
def _make_min_count_stat_function(
    def stat_func(
def _make_stat_function(
    def stat_func(
def _make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f):
    def stat_func(
def _make_cum_function(
    def cum_func(self, axis=None, skipna=True, *args, **kwargs):
def _make_logical_function(
    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):
