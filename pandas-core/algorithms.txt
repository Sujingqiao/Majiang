def _ensure_data(values, dtype=None):
def _reconstruct_data(values, dtype, original):
def _ensure_arraylike(values):
def _get_hashtable_algo(values):
def _get_data_algo(values, func_map):
def match(to_match, values, na_sentinel=-1):
def unique(values):
def isin(comps, values):
def _factorize_array(values, na_sentinel=-1, size_hint=None, na_value=None):
def factorize(values, sort=False, order=None, na_sentinel=-1, size_hint=None):
def value_counts(
def _value_counts_arraylike(values, dropna):
def duplicated(values, keep="first"):
def mode(values, dropna: bool = True):
def rank(values, axis=0, method="average", na_option="keep", ascending=True, pct=False):
def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):
def quantile(x, q, interpolation_method="fraction"):
    def _interpolate(a, b, fraction):
    def _get_score(at):
class SelectN:
    def __init__(self, obj, n, keep):
    def nlargest(self):
    def nsmallest(self):
    def is_valid_dtype_n_method(dtype):
class SelectNSeries(SelectN):
    def compute(self, method):
class SelectNFrame(SelectN):
    def __init__(self, obj, n, keep, columns):
    def compute(self, method):
        def get_indexer(current_indexer, other_indexer):
def _view_wrapper(f, arr_dtype=None, out_dtype=None, fill_wrap=None):
    def wrapper(arr, indexer, out, fill_value=np.nan):
def _convert_wrapper(f, conv_dtype):
    def wrapper(arr, indexer, out, fill_value=np.nan):
def _take_2d_multi_object(arr, indexer, out, fill_value, mask_info):
def _take_nd_object(arr, indexer, out, axis, fill_value, mask_info):
def _get_take_nd_function(ndim, arr_dtype, out_dtype, axis=0, mask_info=None):
    def func(arr, indexer, out, fill_value=np.nan):
def take(arr, indices, axis=0, allow_fill=False, fill_value=None):
def take_nd(
def take_2d_multi(
        def func(arr, indexer, out, fill_value=np.nan):
def searchsorted(arr, value, side="left", sorter=None):
def diff(arr, n: int, axis: int = 0):
